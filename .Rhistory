1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,
0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,
0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
ncol = 16, nrow = 12))
D
evector2n
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = evector2n)
ranks
ranks_sorted = sort(ranks, decreasing = TRUE)
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = evector2n)
ranks_sorted = sort(ranks$pagerank, decreasing = TRUE)
ranks_sorted
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = evector2n)
ranks_sorted = ranks[order(ranks$pagerank),]
ranks_sorted
ranks_sorted = ranks[order(ranks$pagerank, decreasing = TRUE),]
ranks_Sorted
ranks_sorted
# Iterating through different k's
ret = c()
for(k in 1:100){
ret = c(ret, powermethod(G, k))
}
library(MASS)
for(k in 1:100){
ret = c(ret, powermethod(G, k))
}
ret
# Iterating through different k's
ret = c()
for(k in 1:100){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
ret
# Iterating through different k's
ret = c()
for(k in 1:50){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
ret
# Iterating through different k's
df = data.frame(iteration = c(1:50), eigenvalue = powermethod(G, 1:50))
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k))
}
ret
ret = c(ret, powermethod(G, k)$eigenvalue)
ret
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
ret
df = data.frame(iteration = c(1:50), eigenvalue = ret)
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
powermethod(G, 49)
powermethod(G, 50)
evector2n
powermethod(G, 50)$eigenvector
evector2
powermethod(G, 50)$eigenvector
t(powermethod(G, 50)$eigenvector)
evector2n
debug(powermethod)
powermethod(G, 2)
v
w
v
lambda
v
w
v
powermethod(G, 2)
undebug(powermethod)
ranks
library(ggplot2)
ggplot(ranks, aes(x=webpage, y=pagerank)) +
geom_bar(stat = "identity")
ggplot(ranks, aes(x=webpage, y=pagerank)) +
geom_bar(stat = "identity", color = "lightblue")
barplot(ranks)
ranks
?barplot
barplot(height = pagerank)
barplot(ranks, height = pagerank)
barplot(ranks)
ranks
barplot(ranks, height = rank$pagerank)
barplot(ranks$pagerank)
barplot(ranks$pagerank, names.arg = ranks$webpage)
barplot(ranks$pagerank, names.arg = ranks$webpage, col = "lightblue")
ranks_plot = barplot(ranks$pagerank,
names.arg = ranks$webpage,
col = "lightblue",
main = "Page Rank") # bar plot of pageranks
install.packages("fastmatrix")
library(fastmatrix)
power.method(G)
G
power.method(G, maxiter = 50)
power.method(G, maxiter = 100)
dim(G)
powermethod(G, 50)
ev2
powermethod(G, 50)
evalue2
evector2
evalue1
evector1
evalue2
evector2
evector2n
df
evalue1
evalue2
debug(power.method)
power.method(G)
undebug(power.method)
v
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
v
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(G), nrow(G))) # initialize vector
v
sum(abs(v))
G
t(v)
v
length(v)
t(v)
G %*% v
Gnew
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(Gnew, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
v
Gnew
Gnew %*% v
w = Gnew %*% v
w
w/sum(abs(w))
v = w/sum(abs(w))
v
lambda = t(v) %*% Gnew %*% v
lambda
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(Gnew, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("2"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
evalue1
?norm
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("1"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("2"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
evalue1
w
v = fractions(rep(1/nrow(G), nrow(G)))
v
w = G %*% v
w
v = w/norm(w, type = c("2"))
v
norm(v, type = c("2"))
norm(v, type = c("1"))
df
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("I"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("2"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(G, k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
# Teleportation
alpha = 0.85
E = (1/nrow(G)) * rep(1, nrow(A)) %*% t(rep(1, nrow(A)))
E
E = (1/nrow(G)) * rep(1, nrow(G)) %*% t(rep(1, nrow(G)))
E
rep(1, nrow(G))
t(rep(1, nrow(G))
)
rep(1, nrow(G)) %*% t(rep(1, nrow(G))
)
E = fractions((1/nrow(G)) * rep(1, nrow(G)) %*% t(rep(1, nrow(G))))
E
Gtilda = alpha*G + (1-alpha)*E
Gtilda
# Eigenvalue decomposition for Gtilda
ev2 = eigen(Gtilda)
ev2
ev2$vectors[,1]
sum(ev2$vectors[,1])
G
isSymmetric(/g)
isSymmetric(G)
evector2
evector2n
ranks_sorted
df
evalue2
evalue1
ev2
eig(Gnew)
eigen(Gnew)
Gnew
evector2
G
Gnew
eigen(Gnew)
evector2
evector2n
evector2
Gnew
eigen(Gnew)
# Adding artificial links to dangling node
Gnew = G
Gnew[5,] = rep(1/12, 12)
ev2 = eigen(t(Gnew)) # Eigenvalue decomposition
evv2
ev2
ranks_sorted
evector2 = ev2$vectors[,1]
# Normalizing eigenvector
evector2n = evector2/sum(evector2)
evector2n
v
v = fractions(rep(1/nrow(Gnew), nrow(Gnew)))
v
w = A %*% v
w = Gnew %*% v
w
v = w/norm(w, type = c("1"))
v
lambda = t(v) %*% Gnew %*% v
lambda
A
Gnew
Gnew %*% t(v)
Gnew %*% v
evector2
evector2n
t(Gnew) %*% v
v = fractions(rep(1/nrow(Gnew), nrow(Gnew)))
v
t(Gnew) %*% v
evector2n
evector2
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("1"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
powermethod(t(Gnew), 70)
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("1"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
power.method(t(Gnew))
evector2n
evector2
powermethod(t(Gnew), 75)
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
evector3 = powermethod(t(Gnew), 70)$eigenvector
evector3
evector2
power.method(t(Gnew), maxiter = 70)
v = fractions(rep(1/sqrt(nrow(A)), nrow(A)))
v
1/sqrt(12)
fractions(1/sqrt(12))
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = fractions(rep(1/sqrt(nrow(A)), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("1"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = rep(1/sqrt(nrow(A)), nrow(A)) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("1"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
df = data.frame(iteration = c(1:70), eigenvalue = ret)
evector3 = powermethod(t(Gnew), 70)$eigenvector
evector3
evector2
evector2n
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
ret
df = data.frame(iteration = c(1:70), eigenvalue = ret)
df
evector3 = powermethod(t(Gnew), 28)$eigenvector
evector3
evector2
evector2n
# Iterating through different k's
ret = c()
for(k in 1:70){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
df = data.frame(iteration = c(1:50), eigenvalue = ret) # converges at 28 iterations
evector3 = powermethod(t(Gnew), 28)$eigenvector # should be equivalent to evector2n
# Iterating through different k's
ret = c()
for(k in 1:50){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
df = data.frame(iteration = c(1:50), eigenvalue = ret) # converges at 28 iterations
evector3 = powermethod(t(Gnew), 28)$eigenvector # should be equivalent to evector2n
df
.Machine$double.eps
Gtilda
ev2 = eigen(t(Gnew)) # Eigenvalue decomposition of new G matrix
evalue2 = ev2$values[1]
evector2 = ev2$vectors[,1]
ev2
evector2
# Eigenvalue decomposition for Gtilda
ev3 = eigen(Gtilda)
ev3
# Eigenvalue decomposition for Gtilda
ev3 = eigen(t(Gtilda))
ev3
df
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = rep(1/nrow(A), nrow(A)) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("1"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
for(k in 1:50){
ret = c(ret, powermethod(t(Gnew), k)$eigenvalue)
}
df = data.frame(iteration = c(1:50), eigenvalue = ret) # converges at 28 iterations
df
evector3 = powermethod(t(Gnew), 28)$eigenvector # should be equivalent to evector2n
evector3
evector2
evector2n
