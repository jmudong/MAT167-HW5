geom_line(col = "red") +
labs(title = "Relative l2 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
# Iterating through different k's
ret = c()
error = c()
abs = norm(as.matrix(Re(evector2n)), type = "1") # used for calculating errors of iterated eigenvector norms
for(k in 1:50){
ev_power = powermethod(t(Gnew), k)
ret = c(ret, ev_power$eigenvalue)
l2 = norm(ev_power$eigenvector, type = "1")
error = c(error, abs - l2)
}
power_df = data.frame(iteration = c(1:50), eigenvalue = ret, error = error) # converges at 28 iterations
evector_power = powermethod(t(Gnew), 28)$eigenvector # should be equivalent to evector2n
# Plot of l2 errors of power iteration results
error_plot = ggplot(data = power_df, aes(x = iteration, y = abs(error))) +
geom_line(col = "red") +
labs(title = "Relative l1 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
error_plot
# Iterating through different k's
ret = c()
error = c()
abs = norm(as.matrix(Re(evector2n)), type = "1") # used for calculating errors of iterated eigenvector norms
for(k in 1:50){
ev_power = powermethod(t(Gnew), k)
ret = c(ret, ev_power$eigenvalue)
l2 = norm(ev_power$eigenvector, type = "1")
error = c(error, abs - l2)
}
power_df = data.frame(iteration = c(1:50), eigenvalue = ret, error = error) # converges at 28 iterations
evector_power = powermethod(t(Gnew), 28)$eigenvector # should be equivalent to evector2n
# Plot of l2 errors of power iteration results
error_plot = ggplot(data = power_df, aes(x = iteration, y = error)) +
geom_line(col = "red") +
labs(title = "Relative l1 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
error_plot
# Plot of l2 errors of power iteration results
error_plot = ggplot(data = power_df, aes(x = iteration, y = abs(error))) +
geom_line(col = "red") +
labs(title = "Relative l1 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
error_plot
# Iterating through different k's
ret = c()
error = c()
abs = norm(as.matrix(Re(evector2n)), type = "2") # used for calculating errors of iterated eigenvector norms
for(k in 1:50){
ev_power = powermethod(t(Gnew), k)
ret = c(ret, ev_power$eigenvalue)
l2 = norm(ev_power$eigenvector, type = "2")
error = c(error, abs - l2)
}
power_df = data.frame(iteration = c(1:50), eigenvalue = ret, error = error) # converges at 28 iterations
evector_power = powermethod(t(Gnew), 28)$eigenvector # should be equivalent to evector2n
# Plot of l2 errors of power iteration results
error_plot = ggplot(data = power_df, aes(x = iteration, y = abs(error))) +
geom_line(col = "red") +
labs(title = "Relative l1 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
error_plot
install.packages("igraph")
# Hyperlink network
g = make_graph(~ A+B)
library(igraph)
# Hyperlink network
g = make_graph(~ A+B)
plot(g)
# Hyperlink network
g = make_graph(edges = c(A,B), n=10, directed = TRUE)
# Hyperlink network
g = make_graph(edges = c('A','B'), n=10, directed = TRUE)
plot(g)
library(MASS)
library(ggplot2)
# Creating hyperlink matrix
G = t(fractions(matrix(c(0, 0, 0, 1/2, 0, 0, 0, 1/2, 0, 0, 0, 0,
1/3, 0, 0, 1/3, 1/3, 0, 0, 0, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1/2, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1/4, 1/4, 1/4, 0, 1/4, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1/2, 0, 1/2, 0,
0, 0, 0, 0, 0, 0, 1/2, 0, 0, 0, 1/2, 0,
0, 0, 0, 0, 0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1/3, 0, 0, 0, 1/3, 0, 1/3,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
nrow = 12, ncol = 12)))
G
list(G = G)
# Eigenvalue Decomposition
ev1 = eigen(t(G))
evalue1 = ev1$values[1] # Choosing largest eigenvalue
evector1 = ev1$vectors[,1] # Eigenvector corresponding to largest eigenvalue
evalue1
evector2
evector1
list(eigenvalue = Re(evalue1), eigenvector = Re(evector2))
list(eigenvalue = Re(evalue1), eigenvector = Re(evector1))
ev1
# Adding artificial links to dangling node
Gnew = G
Gnew[5,] = rep(1/12, 12)
Gnew
list(G = Gnew)
# Adding artificial links to dangling node
Gnew = G
Gnew[5,] = rep(1/12, 12)
ev2 = eigen(t(Gnew)) # Eigenvalue decomposition of new G matrix
evalue2 = ev2$values[1]
evector2 = ev2$vectors[,1]
ev2
evalue2
evector2
# Normalizing eigenvector
evector2n = evector2/sum(evector2)
evector2n
list(eigenvalue = evalue2, eigenvector = evector2)
list(eigenvalue = Re(evalue2), eigenvector = Re(evector2))
# Normalizing eigenvector
evector2n = evector2/sum(evector2)
evector2n
list(eigenvector = Re(evector2n))
sum(evector2n)
sum(evector2)
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = Re(evector2n))
ranks_sorted = ranks[order(ranks$pagerank, decreasing = TRUE),]
ranks_sorted
ranks_plot = ggplot(data = ranks, aes(x = webpage, y = pagerank)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.8) +
labs(title = "PageRank",
x = "Webpage",
y = "PageRank Value") +
theme_minimal()
ranks_plot
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = Re(evector2n))
ranks_sorted = ranks[order(ranks$pagerank, decreasing = TRUE),]
ranks_plot = ggplot(data = ranks, aes(x = webpage, y = pagerank)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.8) +
labs(title = "PageRank",
x = "Webpage",
y = "PageRank Value") +
theme_minimal()
ranks_plot
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue and eigenvector of matrix A
# given k iterations
v = rep(1/nrow(A), nrow(A)) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/norm(w, type = c("1"))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
# Iterating through different k's
ret = c()
error = c()
abs = norm(as.matrix(Re(evector2n)), type = "2") # used for calculating errors of iterated eigenvector norms
for(k in 1:50){
ev_power = powermethod(t(Gnew), k)
ret = c(ret, ev_power$eigenvalue)
l2 = norm(ev_power$eigenvector, type = "2")
error = c(error, abs - l2)
}
power_df = data.frame(iteration = c(1:50), eigenvalue = ret, error = error) # converges at 28 iterations
evector_power = powermethod(t(Gnew), 28)$eigenvector # should be equivalent to evector2n
# Plot of l2 errors of power iteration results
error_plot = ggplot(data = power_df, aes(x = iteration, y = abs(error))) +
geom_line(col = "red") +
labs(title = "Relative l2 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
error_plot
0.01:1
(0.01):1
seq(0.01, 1, 0.01)
# Iterating through alphas
n <- nrow(G)
E <- matrix(1/n, n, n)
for (alpha in seq(0.01, 1, 0.01)){
G_tilde <- alpha * G + (1 - alpha) * E
}
G_tilde
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = ev3$values[1]
results = c(results, evalue)
}
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = ev$values[1]
results = c(results, evalue)
}
results
# Part 9
alpha <- 0.85
n <- nrow(G)
E <- matrix(1/n, n, n)
G_tilde <- alpha * G + (1 - alpha) * E
# Part 10
ev3 <- eigen(t(G_tilde))
evalue3 <- ev3$values[1]
evector3 <- abs(ev3$vectors[,1])
evlue3
evalue3
evector3
# Part 11
rankings_comparison <- data.frame(
webpage = letters[1:12],
pagerank_G = Re(evector2n),
pagerank_G_tilde = evector3 / sum(evector3)
)
results
Re(results)
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = ev$values[1]
results = c(results, evalue)
reuslts = Re(results)
}
hist(results)
results
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = ev$values[1]
results = c(results, evalue)
results = Re(results)
}
hist(results)
mean(results)
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = Re(ev$values[1])
evector = Re(ev$vectors[,1])
l2 = norm(evector, type = "2")
results = c(results, l2)
}
results
l2 = norm(evector, type = "1")
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = Re(ev$values[1])
evector = Re(ev$vectors[,1])
l2 = norm(evector, type = "1")
results = c(results, l2)
}
evector
# Part 9
alpha <- 0.85
n <- nrow(G)
E <- matrix(1/n, n, n)
G_tilde <- alpha * G + (1 - alpha) * E
# Part 10
ev3 <- eigen(t(G_tilde))
evalue3 <- ev3$values[1]
evector3 <- abs(ev3$vectors[,1])
evector3
norm(as.matrix(evector3), type = "2")
G_tilde <- 0.01 * G + (1 - 0.01) * E
# Part 10
ev3 <- eigen(t(G_tilde))
evalue3 <- ev3$values[1]
evector3 <- abs(ev3$vectors[,1])
norm(as.matrix(evector3), type = "2")
norm(as.matrix(evector3), type = "1")
# Part 9
alpha <- 0.85
n <- nrow(G)
E <- matrix(1/n, n, n)
G_tilde <- alpha * G + (1 - alpha) * E
# Part 10
ev3 <- eigen(t(G_tilde))
evalue3 <- ev3$values[1]
evector3 <- abs(ev3$vectors[,1])
norm(as.matrix(evector3), type = "1")
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = Re(ev$values[1])
evector = Re(ev$vectors[,1])
l2 = norm(as.matrix(evector), type = "1")
results = c(results, l2)
}
results
evector2
norm(as.matrix(Re(evector2)), type = "1")
3.153901 - results
histogram(3.153901 - results)
hist(3.153901 - results)
x = 3.153901 - results
x
alphas = seq(0.01, 1, 0.01)
alphas
df2 = data.frame(alpha = alphas, errors = x)
df2
ggplot(data = df2, aes(x = alpha, y = error)) +
geom_line(col = "red") +
labs(title = "Relative l2 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
ggplot(data = df2, aes(x = alpha, y = errors)) +
geom_line(col = "red") +
labs(title = "Relative l2 Errors of Power Iteration Results",
x = "# Iteration",
y = "Relative Error") +
theme_minimal()
l1_eigen = norm(as.matrix(Re(evector2), type = "2")
l1_eigen
l1_eigen = norm(as.matrix(Re(evector2), type = "2"))
li_eigen
l1_eigen
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = Re(ev$values[1])
evector = Re(ev$vectors[,1])
l1 = norm(as.matrix(evector), type = "2")
results = c(results, l2)
}
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev = eigen(t(G_tilde))
evalue = Re(ev$values[1])
evector = Re(ev$vectors[,1])
l1 = norm(as.matrix(evector), type = "2")
results = c(results, l1)
}
l1_eigen
results
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev_alpha = eigen(t(G_tilde))
evector_alpha = Re(ev_alpha$vectors[,1])
l1_alpha = norm(as.matrix(evector), type = "1")
results = c(results, l1_alpha)
}
l1_eigen = norm(as.matrix(Re(evector2), type = "1"))
l1_eigen
l1_alpha
error_alpha = l1_eigen - l1_alpha
df_alpha = data.frame(alphas = seq(0.01, 1, 0.01), error = error_alpha)
df_alpha
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev_alpha = eigen(t(G_tilde))
evector_alpha = Re(ev_alpha$vectors[,1])
l1_alpha = norm(as.matrix(evector), type = "1")
results = c(results, l1_alpha)
}
l1_eigen = norm(as.matrix(Re(evector2), type = "1"))
error_alpha = l1_eigen - l1_alpha
df_alpha = data.frame(alphas = seq(0.01, 1, 0.01), error = error_alpha)
df_alpha
l1_eigen
results
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
results = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev_alpha = eigen(t(G_tilde))
evector_alpha = Re(ev_alpha$vectors[,1])
l1_alpha = norm(as.matrix(evector_alpha), type = "1")
results = c(results, l1_alpha)
}
l1_eigen = norm(as.matrix(Re(evector2), type = "1"))
l1_eigen
error_alpha = l1_eigen - l1_alpha
error_alpha
df_alpha = data.frame(alphas = seq(0.01, 1, 0.01), error = error_alpha)
df_alpha
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
l1_eigen = norm(as.matrix(Re(evector2), type = "1"))
results = c()
error_alpha = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev_alpha = eigen(t(G_tilde))
evector_alpha = Re(ev_alpha$vectors[,1])
l1_alpha = norm(as.matrix(evector_alpha), type = "1")
results = c(results, l1_alpha)
error_alpha = c(error_alpha, l1_eigen - l1_alpha)
}
df_alpha = data.frame(alphas = seq(0.01, 1, 0.01), error = error_alpha)
df_alpha
df_alpha = data.frame(alpha = seq(0.01, 1, 0.01), error = error_alpha)
error_plot = ggplot(data = df_alpha, aes(x = alpha, y = error)) +
geom_line(col = "red") +
labs(title = "Relative l1 Errors of Choices for Alpha",
x = "Alpha",
y = "Relative Error") +
theme_minimal()
error_plot
# Iterating through alphas
n = nrow(G)
E = matrix(1/n, n, n)
l1_eigen = norm(as.matrix(Re(evector2), type = "1"))
results = c()
error_alpha = c()
for (alpha in seq(0.01, 1, 0.01)){
G_tilde = alpha * G + (1 - alpha) * E
ev_alpha = eigen(t(G_tilde))
evector_alpha = Re(ev_alpha$vectors[,1])
l1_alpha = norm(as.matrix(evector_alpha), type = "1")
results = c(results, l1_alpha)
error_alpha = c(error_alpha, l1_eigen - l1_alpha)
}
df_alpha = data.frame(alpha = seq(0.01, 1, 0.01), error = error_alpha)
alpha_plot = ggplot(data = df_alpha, aes(x = alpha, y = error)) +
geom_line(col = "red") +
labs(title = "Relative l1 Errors of Choices for Alpha",
x = "Alpha",
y = "Relative Error") +
theme_minimal()
alpha_plot
# Part 9
alpha <- 0.85
n <- nrow(G)
E <- matrix(1/n, n, n)
G_tilde <- alpha * G + (1 - alpha) * E
# Part 10
ev3 <- eigen(t(G_tilde))
evalue3 <- ev3$values[1]
evector3 <- abs(ev3$vectors[,1])
# Part 11
rankings_comparison <- data.frame(
webpage = letters[1:12],
pagerank_G = Re(evector2n),
pagerank_G_tilde = evector3 / sum(evector3)
)
rankings_comparison
View(rankings_comparison)
alpha_plot = ggplot(data = df_alpha, aes(x = alpha, y = abs(error))) +
geom_line(col = "red") +
labs(title = "Relative l1 Errors of Choices for Alpha",
x = "Alpha",
y = "Relative Error") +
theme_minimal()
alpha_plot
df_alpha
