# Creating hyperlink matrix
a = c(0, 0, 0, 1/2, 0, 0, 0, 1/2, 0, 0, 0, 0)
a
length(a)
# Creating hyperlink matrix
G = fractions(matrix(c(0, 0, 0, 1/2, 0, 0, 0, 1/2, 0, 0, 0, 0,
1/3, 0, 0, 1/3, 1/3, 0, 0, 0, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1/2, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1/4, 1/4, 1/4, 0, 1/4, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1/2, 0, 1/2, 0,
0, 0, 0, 0, 0, 0, 1/2, 0, 0, 0, 1/2, 0,
0, 0, 0, 0, 0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1/3, 0, 0, 0, 1/3, 0, 1/3,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
nrow = 12, ncol = 12))
library(MASS)
# Creating hyperlink matrix
G = fractions(matrix(c(0, 0, 0, 1/2, 0, 0, 0, 1/2, 0, 0, 0, 0,
1/3, 0, 0, 1/3, 1/3, 0, 0, 0, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1/2, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1/4, 1/4, 1/4, 0, 1/4, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1/2, 0, 1/2, 0,
0, 0, 0, 0, 0, 0, 1/2, 0, 0, 0, 1/2, 0,
0, 0, 0, 0, 0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1/3, 0, 0, 0, 1/3, 0, 1/3,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
nrow = 12, ncol = 12))
G
# Creating hyperlink matrix
G = t(fractions(matrix(c(0, 0, 0, 1/2, 0, 0, 0, 1/2, 0, 0, 0, 0,
1/3, 0, 0, 1/3, 1/3, 0, 0, 0, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1/2, 0, 1/2, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1/4, 1/4, 1/4, 0, 1/4, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1/2, 0, 1/2, 0,
0, 0, 0, 0, 0, 0, 1/2, 0, 0, 0, 1/2, 0,
0, 0, 0, 0, 0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1/3, 0, 0, 0, 1/3, 0, 1/3,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
nrow = 12, ncol = 12)))
G
# Eigenvalue Decomposition
ev = eigen(A)
# Eigenvalue Decomposition
ev = eigen(G)
ev
lapply(ev, fractions)
# Eigenvalue Decomposition
ev = eigen(t(G))
ev
evalue = ev$values[1]
evalue
evector = ev$vectors[1] # Eigenvector corresponding to largest eigenvalue
evector
evector = ev$vectors[,1] # Eigenvector corresponding to largest eigenvalue
evector
G
# Adding artifical links to dangling node
Gnew = G
Gnew[5,] = rep(1/12, 12)
Gnew
Gnew[5,] = rep(1/12, 12)
Gnew
# Adding artifical links to dangling node
Gnew = G
Gnew[5,] = rep(1/12, 12)
Gnew
sum(Gnew[5,])
# Eigenvalue Decomposition
ev1 = eigen(t(G))
evalue1 = ev1$values[1] # Choosing largest eigenvalue
evector1 = ev1$vectors[,1] # Eigenvector corresponding to largest eigenvalue
# Adding artificial links to dangling node
Gnew = G
Gnew[5,] = rep(1/12, 12)
ev2 = eigen(t(Gnew))
ev2
evalue2 = ev2$values[1]
evector2 = ev2$vectors[,1]
evector2
abs(evector2)
sum(abs(evector2))
evector2/norm(evector2, type = c("2"))
norm(evector2, type = c("2"))
t(evector2)
t(evector2) %*% rep(1, 12)
evector2
# Normalizing eigenvector
evector2/(sum(abs(evector2)))
# Normalizing eigenvector
x = evector2/(sum(abs(evector2)))
sum(abs(x))
# Normalizing eigenvector
evector2n = evector2/(sum(abs(evector2)))
evector2n
# Ordering eigenvectors
D = matrix(c(1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,
1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,
1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,
0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,
0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
ncol = 15, nrow = 12)
D
t(D)
# Ordering eigenvectors
D = matrix(c(1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,
1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,
1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,
0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,
0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
ncol = 16, nrow = 12)
# Ordering eigenvectors
D = t(matrix(c(1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,
1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,
1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,
0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,
0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
ncol = 16, nrow = 12))
D
# Ordering eigenvectors
D = t(matrix(c(1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, # term document matrix
1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,
1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,
0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,
0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
ncol = 16, nrow = 12))
D
colSums(D)
R = colSums(D)
R
ncol(D)
R = match(colSums(D), D)
R
R = data.frame(sample(1:12), colSums(D))
R
R = data.frame(colSums(D))
R
length(evalue2)
evalue2
ev2
length(ev2$values)
R = data.frame(colSums(D))
R
R = data.frame(c(1:12),colSums(D))
R
sort(R)
sort(R$colSums.D.)
R = R[order(R$colSums.D., increasing = TRUE)]
R = R[order(R$colSums.D., increasing = TRUE),]
R = data.frame(c(1:12),colSums(D))
R
R[order(R$colSums.D.),]
R = R[order(R$colSums.D.),]
R
R = data.frame(key = c(1:12), value = colSums(D))
R = R[order(R$colSums.D.),]
R = R[order(R$value),]
R
evector2n
# Relevancy set sorted by decreasing importance
R = data.frame(key = c(1:12), value = colSums(D), evalue = evector2n)
R = R[order(R$value),]
R
evector2
evector2 = abs(ev2$vectors[,1])
evector2
# Normalizing eigenvector
evector2n = evector2/sum(evector2)
evector2n
sum(evector2)
sum(evector2n)
# Relevancy set sorted by decreasing importance
R = data.frame(doc = c(1:12), value = colSums(D), PageRank = evector2n)
R
R = R[order(R$value),]
R
letters
# Relevancy set sorted by decreasing importance
R = data.frame(doc = letters[1:12], value = colSums(D), PageRank = evector2n)
R = R[order(R$value),]
R
# Relevancy set sorted by decreasing importance
R = data.frame(webpage = letters[1:12], importance = colSums(D), PageRank = evector2n)
R = R[order(R$value),]
# Relevancy set sorted by decreasing importance
R = data.frame(webpage = letters[1:12], importance = colSums(D), PageRank = evector2n)
R = R[order(R$importance),]
R
D
evector2n[10]
R
# Power Iteration
pi0 = fractions(rep(1/12, 12))
pi0
sum(pi0)
range(10)
A = diag(3)
A
A^2
A %*% A
A %^% 2
library(expm)
install.packages("expm")
library(expm)
A %^% 5
A %^% 4
A = matrix(c(1:9), ncol = 3, nrow = 3)
A
A^2
A %*% A
A %^% A
A %^% 2
A %*% A
dim(G)
nrow(G)
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue of given matrix A
# with k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/sum(abs(w))
lambda = t(v) %*% A %*% v
}
return(lambda)
}
powermethod(G, 1)
for(k in 1:100){
ret = c(powermethod(A,k))
}
ret
ret = c()
for(k in 1:100){
ret = c(ret, powermethod(A,k))
}
ret
powermethod(A, 150)
powermethod(A, 100)
evalue2
evalue1
powermethod(A, 1)
A
powermethod(G, 1)
powermethod(G, 100)
powermethod(G, 150)
powermethod(G, 1)
powermethod(G, 25)
evalue1
abs(evalue1)
v = fractions(rep(1/nrow(G), nrow(G)))
v
w = G %*% v
w
v = w/sum(abs(w))
v
lambda = t(v) %*% A %*% v
lambda = t(v) %*% G %*% v
lambda
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue of given matrix A
# with k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/sum(abs(w))
lambda = t(v) %*% A %*% v
}
return(lambda, v)
}
powermethod(G, 25)
return(list(eigenvalue = lambda, eigenvector = v))
# Power Iteration
powermethod = function(A, k){
# function that returns largest eigenvalue of given matrix A
# with k iterations
v = fractions(rep(1/nrow(A), nrow(A))) # initialize vector
for(i in 1:k){
w = A %*% v
v = w/sum(abs(w))
lambda = t(v) %*% A %*% v
}
return(list(eigenvalue = lambda, eigenvector = v))
}
powermethod(G, 25)
evector1
ev1
powermethod(G, 25)
R
G
evector2n
# Term-Document Matrix
D = t(matrix(c(1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,
1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,
1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,
0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,
0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1,
0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,
0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1),
ncol = 16, nrow = 12))
D
evector2n
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = evector2n)
ranks
ranks_sorted = sort(ranks, decreasing = TRUE)
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = evector2n)
ranks_sorted = sort(ranks$pagerank, decreasing = TRUE)
ranks_sorted
# Ordering eigenvector
ranks = data.frame(webpage = letters[1:12], pagerank = evector2n)
ranks_sorted = ranks[order(ranks$pagerank),]
ranks_sorted
ranks_sorted = ranks[order(ranks$pagerank, decreasing = TRUE),]
ranks_Sorted
ranks_sorted
